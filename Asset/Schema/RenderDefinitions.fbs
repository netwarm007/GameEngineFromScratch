namespace render_graph;


/////////////////////////////////////////////////////////////////////////////////
// Enums

enum Blend : ushort { Zero, One, SrcColor, InvSrcColor, SrcAlpha, InvSrcAlpha, DestAlpha, InvDestAlpha, DestColor, InvDestColor, SrcAlphaSta, BlendFactor, InvBlendFactor, Src1Color, InvSrc1Color, Src1Alpha, InvSrc1Alpha }

enum BlendOperation : byte { Add, Subtract, RevSubtract, Min, Max }

enum ColorWriteEnabled : ushort { Red, Green, Blue, Alpha, All }

enum ComparisonFunction : byte { Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual, Always }

enum CullMode : byte { None, Front, Back }

enum DepthWriteMask : byte { Zero, All }

enum FillMode : byte { Wireframe, Solid, Point }

enum FrontClockwise : byte { True, False }

enum StencilOperation : byte { Keep, Zero, Replace, IncrSat, DecrSat, Invert, Incr, Decr }

enum TextureFormat : ushort { UNKNOWN, R32G32B32A32_TYPELESS, R32G32B32A32_FLOAT, R32G32B32A32_UINT, R32G32B32A32_SINT, R32G32B32_TYPELESS, R32G32B32_FLOAT, R32G32B32_UINT, R32G32B32_SINT, R16G16B16A16_TYPELESS, R16G16B16A16_FLOAT, R16G16B16A16_UNORM, R16G16B16A16_UINT, R16G16B16A16_SNORM, R16G16B16A16_SINT, R32G32_TYPELESS, R32G32_FLOAT, R32G32_UINT, R32G32_SINT, R10G10B10A2_TYPELESS, R10G10B10A2_UNORM, R10G10B10A2_UINT, R11G11B10_FLOAT, R8G8B8A8_TYPELESS, R8G8B8A8_UNORM, R8G8B8A8_UNORM_SRGB, R8G8B8A8_UINT, R8G8B8A8_SNORM, R8G8B8A8_SINT, R16G16_TYPELESS, R16G16_FLOAT, R16G16_UNORM, R16G16_UINT, R16G16_SNORM, R16G16_SINT, R32_TYPELESS, R32_FLOAT, R32_UINT, R32_SINT, R8G8_TYPELESS, R8G8_UNORM, R8G8_UINT, R8G8_SNORM, R8G8_SINT, R16_TYPELESS, R16_FLOAT, R16_UNORM, R16_UINT, R16_SNORM, R16_SINT, R8_TYPELESS, R8_UNORM, R8_UINT, R8_SNORM, R8_SINT, R9G9B9E5_SHAREDEXP, D32_FLOAT_S8X24_UINT, D32_FLOAT, D24_UNORM_S8_UINT, D24_UNORM_X8_UINT, D16_UNORM, S8_UINT, BC1_TYPELESS, BC1_UNORM, BC1_UNORM_SRGB, BC2_TYPELESS, BC2_UNORM, BC2_UNORM_SRGB, BC3_TYPELESS, BC3_UNORM, BC3_UNORM_SRGB, BC4_TYPELESS, BC4_UNORM, BC4_SNORM, BC5_TYPELESS, BC5_UNORM, BC5_SNORM, B5G6R5_UNORM, B5G5R5A1_UNORM, B8G8R8A8_UNORM, B8G8R8X8_UNORM, R10G10B10_XR_BIAS_A2_UNORM, B8G8R8A8_TYPELESS, B8G8R8A8_UNORM_SRGB, B8G8R8X8_TYPELESS, B8G8R8X8_UNORM_SRGB, BC6H_TYPELESS, BC6H_UF16, BC6H_SF16, BC7_TYPELESS, BC7_UNORM, BC7_UNORM_SRGB, FORCE_UINT }

enum TopologyType : byte { Unknown, Point, Line, Triangle, Patch }

enum BufferType : byte { Vertex, Index, Constant, Indirect }

enum ResourceUsageType : byte { Immutable, Dynamic, Stream }

enum IndexType : byte { Uint16, uint32 }

enum TextureType : byte { Texture1D, Texture2D, Texture3D, Texture_1D_Array, Texture_2D_Array, Texture_Cube_Array }

enum ShaderStage : byte { Vertex, Fragment, Geometry, Compute, Hull, Domain }

enum TextureFilter : byte { Nearest, Linear }

enum TextureMipFilter : byte { Nearest, Linear }

enum TextureAddressMode : byte { Repeat, Mirrored_Repeat, Clamp_Edge, Clamp_Border }

enum VertexComponentFormat : byte { Float, Float2, Float3, Float4, Byte, Byte4N, UByte, UByte4N, Short2, Short2N, Short4, Short4N }

enum VertexInputRate : byte { PerVertex, PerInstance }

enum LogicOperation: byte { Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, OrInverted }

enum QueueType : byte { Graphics, Compute, CopyTransfer }

enum CommandType : byte { BindPipeline, BindResourceTable, BindVertexBuffer, BindIndexBuffer, Draw, DrawIndexed, DrawInstanced, DrawIndexedInstanced, CopyResource }

enum RenderTargetLoadStoreAction : byte { DontCare, Clear, Keep }


// Cube face
// Shader stage
// Uniform type
// Render pass action
// ERRORS!!!

/////////////////////////////////////////////////////////////////////////////////
// Render States Utility

struct DepthStencilOperation {
    fail                    : StencilOperation;
    depth_fail              : StencilOperation;
    pass                    : StencilOperation;
    func                    : ComparisonFunction;
}

struct RenderTargetBlend {
    blend_enable            : bool;
    //logic_op_enable         : bool;

    src_blend               : Blend;
    dst_blend               : Blend;
    blend_operation         : BlendOperation;

    src_blend_alpha         : Blend;
    dst_blend_alpha         : Blend;
    blend_operation_alpha   : BlendOperation;

    // Logic operation: DX12 Only ?
    color_write_mask        : byte;
}

/////////////////////////////////////////////////////////////////////////////////
// Render States

struct DepthStencilState {
    enable                  : bool;
    depth_function          : ComparisonFunction;
    depth_write_mask        : DepthWriteMask;

    stencil_enable          : bool;
    stencil_read_mask       : byte;
    stencil_write_mask      : byte;

    front_face              : DepthStencilOperation;
    back_face               : DepthStencilOperation;
}

struct RasterizerState {
    fill_mode               : FillMode;
    cull_mode               : CullMode;

    front_counter_clockwise : bool;
    
    depth_bias              : int;
    depth_bias_clamp        : float;
    slope_scaled_depth_bias : float;

    depth_clip_enabled      : bool;
    multisample_enabled     : bool;
    conservative            : bool;
}

struct BlendState {
    enable                  : bool;
    separate_blend          : bool;

    render_target_blend0    : RenderTargetBlend;
    render_target_blend1    : RenderTargetBlend;
    render_target_blend2    : RenderTargetBlend;
    render_target_blend3    : RenderTargetBlend;
    render_target_blend4    : RenderTargetBlend;
    render_target_blend5    : RenderTargetBlend;
    render_target_blend6    : RenderTargetBlend;
    render_target_blend7    : RenderTargetBlend;
}

struct PipelineState {
    // Shaders
    blend_state             : BlendState;
    rasterizer_state        : RasterizerState;
    depth_stencil_state     : DepthStencilState;
    // Input layout
    topology_type           : TopologyType;
    // Render target formats
    // Depth stencil format

}


/////////////////////////////////////////////////////////////////////////////////
// High level rendering

attribute "ui";

struct RenderTarget {
    width                   : ushort (ui: "min:800, max:7680");
    height                  : ushort (ui: "min:600, max:4320");
    scale_x                 : float;
    scale_y                 : float;
    load_action             : RenderTargetLoadStoreAction;
    store_action            : RenderTargetLoadStoreAction;
    format                  : TextureFormat;
}

table FrameBuffer {
    color_attachment        : RenderTarget;
    color_clear_value       : color;
    depth_attachment        : RenderTarget;
    depth_clear_value       : float;
}

table RenderPass {
    frame_buffer            : FrameBuffer;
    pipeline_state          : PipelineState;
}

table RenderPipeline {
    render_passes           : [RenderPass];
}

root_type RenderPipeline;
