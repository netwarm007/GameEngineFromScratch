version: 2.1
orbs:
  win: circleci/windows@4.1.1

jobs:
  build_windows:
    executor:
      name: win/server-2022
      shell: powershell.exe
    steps:
      - run: systeminfo
      - run:
          name: "Install CMake, Flex and Bison"
          command: |
            $machinePath = [Environment]::GetEnvironmentVariable('Path', 'MACHINE')
            $newMachineEnvironmentPath = $machinePath
            
            # install chocolatey
            $chocolateyPath = "$env:AllUsersProfile\chocolatey\bin"
            if(Get-Command "choco" -ErrorAction SilentlyContinue)
            {
              echo "Chocolatey is already installed. Skipping installation."
            }
            else
            {
              echo "Chocolatey net present. Installing chocolatey."
              Invoke-Expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
              {
                echo "Adding $chocolateyPath to Path environment variable"
                $env:Path += ";$chocolateyPath"
                $newMachineEnvironmentPath += ";$chocolateyPath"
              }
              else
              {
                echo "$chocolateyPath already present in Path environment variable"
              }
            }
            
            # install cmake
            $cmakePath = "${env:ProgramFiles(x86)}\CMake\bin"
            if(Get-Command "cmake" -ErrorAction SilentlyContinue)
            {
              echo "Cmake is already installed. Skipping installation."
            }
            else
            {
              echo "Cmake not present. Installing cmake."
              choco install cmake.portable -y

              if (-not ($machinePath.ToLower().Contains($cmakePath.ToLower())))
              {
                echo "Adding $cmakePath to Path environment variable"
                $env:Path += ";$cmakePath"
                $newMachineEnvironmentPath = "$cmakePath;$newMachineEnvironmentPath"
              }
              else
              {
                echo "$cmakePath already present in Path environment variable"
              }
            }

            # install winflexbison3
            $winflexbison3Path = "${env:ProgramFiles(x86)}\WinFlexBison\bin"
            if(Get-Command "bison" -ErrorAction SilentlyContinue)
            {
              echo "bison is already installed. Skipping installation."
            }
            else
            {
              echo "bison not present. Installing bison."
              choco install winflexbison3 -y

              if (-not ($machinePath.ToLower().Contains($winflexbison3Path.ToLower())))
              {
                echo "Adding $winflexbison3Path to Path environment variable"
                $env:Path += ";$winflexbison3Path"
                $newMachineEnvironmentPath = "$winflexbison3Path;$newMachineEnvironmentPath"
              }
              else
              {
                echo "$winflexbison3Path already present in Path environment variable"
              }
            }

            # update machine environment path
            if ($newMachineEnvironmentPath -ne $machinePath)
            {
              [Environment]::SetEnvironmentVariable('Path', $newMachineEnvironmentPath, 'MACHINE')
            }

            # install NSIS for packaging
            choco install nsis -y

            # install vulkan SDK
            choco install vulkan-sdk -y
            refreshenv
      - restore_cache:
          keys:
            - source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
            - source-{{ arch }}-{{ .Branch }}-
            - source-{{ arch }}-
      - run:
          name: restore repo
          command: |
            if (Test-Path -Path ".git" ) {
              git restore .
            }
      - checkout
      - run:
          name: init submodules
          command: |
            git submodule update --init --recursive
      - run:
          name: git gc
          command: |
             git gc
             git lfs prune
      - save_cache:
          key: source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - run:
          name: "Build Dependencies"
          command: |
            scripts/build_imgui
            scripts/build_crossguid
            scripts/build_opengex
            scripts/build_zlib
            scripts/build_bullet
            scripts/build_glslangValidator
            scripts/build_spirvcross
            scripts/build_libispc-texcomp
            scripts/build_openal
      - run:
          name: "Build Engine"
          command: |
            scripts/build-vs
      - run:
          name: "Cook Asset"
          command: |
            scripts/cook_material
      - run:
          name: "Test"
          command: |
            cmake --build build --target RUN_TESTS
      - run:
          name: Package
          command: |
             cmake --build ./build --target package
      - persist_to_workspace:
          root: build
          paths: 
            - GEFS-0.1.0-win64.exe
      - store_artifacts:
          path: build/GEFS-0.1.0-win64.exe
  build_linux:
    machine:
      image: ubuntu-2204:2022.04.1 # recommended linux image
    resource_class: large
    steps:
      - run: 
          name: Install Dependencies
          command: |
             sudo apt update 
             sudo apt install -y curl clang cmake ninja-build git uuid-dev 
             sudo apt install -y libx11-dev libx11-xcb-dev libgl1-mesa-dev libnss3-dev libxss-dev libatk1.0-dev libatk-bridge2.0-dev libglib2.0-dev libpango1.0-dev libxi-dev libfontconfig1-dev libnspr4-dev libxcomposite-dev libxcursor-dev libxrender-dev libxtst-dev libxrandr-dev libgio2.0-cil-dev libdbus-1-dev libasound2-dev libcups2-dev libncurses5-dev
             sudo apt install -y flex bison
             curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
             sudo apt install -y git-lfs
          environment:
             DEBIAN_FRONTEND: noninteractive
      - restore_cache:
          keys:
            - source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
            - source-{{ arch }}-{{ .Branch }}-
            - source-{{ arch }}-
      - run:
          name: restore repo
          command: |
            if [ -d ".git" ]; then
              git restore .
            fi
      - checkout
      - run:
          name: init submodules
          command: |
            git submodule sync
            git submodule update --init --recursive
      - run:
          name: git gc
          command: |
             git gc
             git lfs prune
      - save_cache:
          key: source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - run:
          name: "Build Dependencies"
          command: |
             ./scripts/build_imgui.sh
             ./scripts/build_crossguid.sh
             ./scripts/build_opengex.sh
             ./scripts/build_bullet.sh
             ./scripts/build_glslangValidator.sh
             ./scripts/build_spirvcross.sh
             ./scripts/build_libispc-texcomp.sh
             ./scripts/build_openal.sh
      - run:
          name: "Build Engine"
          command: |
             ./scripts/build-ninja.sh
      - run:
          name: "Cook Asset"
          command: |
            scripts/cook_material.sh
      - run:
          name: Test
          command: |
             cmake --build ./build --target test
      - run:
          name: Package
          command: |
             cmake --build ./build --target package
      - persist_to_workspace:
          root: build
          paths: 
            - GEFS-0.1.0-Linux.sh
            - GEFS-0.1.0-Linux.tar.gz
            - GEFS-0.1.0-Linux.tar.Z
      - store_artifacts:
          path: build/GEFS-0.1.0-Linux.sh
      - store_artifacts:
          path: build/GEFS-0.1.0-Linux.tar.gz
      - store_artifacts:
          path: build/GEFS-0.1.0-Linux.tar.Z
  build_macos:
    macos:
      xcode: "13.4.0"
    steps:
      - restore_cache:
          keys:
            - source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
            - source-{{ arch }}-{{ .Branch }}-
            - source-{{ arch }}-
      - run:
          name: restore repo
          command: |
            if [ -d ".git" ]; then
              git restore .
            fi
      - checkout
      - run:
          name: init submodules
          command: |
            git submodule sync
            git submodule update --init --recursive
      - run:
          name: git gc
          command: |
             git gc
             git lfs prune
      - save_cache:
          key: source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - run: 
          name: Install Dependencies via MacPorts
          command: |
             curl -L -o $(pwd)/MacPorts-2.7.2-12-Monterey.pkg https://github.com/macports/macports-base/releases/download/v2.7.2/MacPorts-2.7.2-12-Monterey.pkg
             sudo installer -package $(pwd)/MacPorts-2.7.2-12-Monterey.pkg -target /
             rm $(pwd)/MacPorts-2.7.2-12-Monterey.pkg
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             sudo -E port -q install cmake ninja flex bison
      - run:
          name: "Build Dependencies"
          command: |
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             ./scripts/build_imgui.sh
             ./scripts/build_crossguid.sh
             ./scripts/build_opengex.sh
             ./scripts/build_zlib.sh
             ./scripts/build_bullet.sh
             ./scripts/build_glslangValidator.sh
             ./scripts/build_spirvcross.sh
             ./scripts/build_libispc-texcomp.sh
             ./scripts/build_openal.sh
      - run:
          name: "Build Engine"
          command: |
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             ./scripts/build-ninja.sh
      - run:
          name: "Cook Asset"
          command: |
            scripts/cook_material.sh
      - run:
          name: Test
          command: |
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             cmake --build ./build --target test
      - run:
          name: Package
          command: |
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             cmake --build ./build --target package
      - persist_to_workspace:
          root: build
          paths: 
            - GEFS-0.1.0-Darwin.sh
            - GEFS-0.1.0-Darwin.tar.gz
      - store_artifacts:
          path: build/GEFS-0.1.0-Darwin.sh
      - store_artifacts:
          path: build/GEFS-0.1.0-Darwin.tar.gz
  build_android:
    working_directory: ~/project
    docker:
      - image: cimg/android:2022.09-ndk
    resource_class: large
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - run:
          name: Install Git LFS
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt install -y git-lfs
      - run:
          name: Install cmake
          command: |
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt-get update
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
            sudo apt-get install kitware-archive-keyring
            sudo apt install -y cmake=3.23.2-0kitware1ubuntu20.04.1 cmake-data=3.23.2-0kitware1ubuntu20.04.1
      - run:
          name: Install Dependencies
          command: |
            sudo apt install -y ninja-build bison flex libncurses5
      - run:
          name: Install LLVM 13
          command: |
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 13
            rm ./llvm.sh
      #- restore_cache:
      #    keys:
      #      - source-android-{{ .Branch }}-{{ .Revision }}
      #      - source-android-{{ .Branch }}-
      #      - source-android-
      - checkout
      - run:
          name: init submodules
          command: |
            git submodule sync
            git submodule update --init --recursive
      - run:
          name: git gc
          command: |
             git gc
             git lfs prune
      - save_cache:
          key: source-android-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          key: jars-{{ checksum "Game/Billiard/build.gradle" }}-{{ checksum  "Game/Billiard/app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: |
                   ./gradlew androidDependencies
          working_directory: Game/Billiard
      - save_cache:
          paths:
            - Game/Billiard/.gradle
          key: jars-{{ checksum "Game/Billiard/build.gradle" }}-{{ checksum  "Game/Billiard/app/build.gradle" }}
      - run:
          name: Build External Dependencies
          command: |
                   ./scripts/build_crossguid-android.sh
                   ./scripts/build_opengex-android.sh
                   ./scripts/build_bullet-android.sh
                   ./scripts/build_zlib-android.sh
                   ./scripts/build_openal-android.sh
                   ./scripts/build_glslangValidator.sh
                   ./scripts/build_spirvcross.sh
      - run:
          name: Build
          command: |
                   ./gradlew build
          working_directory: Game/Billiard
      - store_artifacts:
          path: Game/Billiard/app/build/reports
          destination: reports
      - store_artifacts:
          path: Game/Billiard/app/build/test-results
          destination: test-results
      - store_artifacts:
          path: Game/Billiard/app/build/outputs/apk
          destination: apk
  publish_github_release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=0.1.0
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/
workflows:
  version: 2
  build-and-test: #for branch
    jobs:
      - build_windows
      - build_linux
      - build_macos
      #- build_android
  build-and-test-and-release: #for tags
    jobs:
      - build_windows:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
      - build_linux:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
      - build_macos:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
      - publish_github_release:
          requires:
            - build_linux
            - build_macos
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/

